<!DOCTYPE html>
<html>
<head>
  <title>GlExmpl</title>
  <link href="/assets/snow.css" media="all" rel="stylesheet" type="text/css">
  <script src="/assets/jquery.js" type="text/javascript"></script>
  <script src="/assets/three.min.js" type="text/javascript"></script>
  <script src="/assets/RollControls.js?body=1" type="text/javascript"></script>
  <script src="/assets/jquery_ujs.js" type="text/javascript"></script>
  <script src="/assets/application.js" type="text/javascript"></script>
  <meta content="authenticity_token" name="csrf-param">
  <meta content="vb7ZhTiJ3Ly+cFA9NtpxA02pp4JiJP1EQeFiQt0rzyQ=" name="csrf-token">
</head>
<body style="background: url('/assets/bg.jpg'); margin: 0px;" onload="init()">

  <script src="/assets/snow.js" type="text/javascript"></script>

<script type="text/javascript">
  var SW = window.innerWidth;
  var SH = window.innerHeight;

  var container;
  var particle;

  var camera, scene, renderer;
  var mouseX = 0;
  var mouseY = 0;

  var winHalfX = SW / 2;
  var winHalfY = SH / 2;

  var particles = [];
  var particleImage = new Image();
  particleImage.src = '/assets/snow.png';

  function init() {
    container = document.createElement('div');
    document.body.appendChild(container);

    camera = new THREE.PerspectiveCamera(75, SW / SH, 1, 10000);
    camera.position.z = 1000;

    scene = new THREE.Scene();
    scene.add(camera);

    renderer = new THREE.CanvasRenderer();

    renderer.setSize(SW, SH);

    var material = new THREE.ParticleBasicMaterial({ map: new THREE.Texture(particleImage) });

    for(var i=0; i<3000; i++) {
      particle = new Particle3D(material);
      particle.position.x = Math.random() * 2000 - 1000;
      particle.position.y = Math.random() * 2000 - 1000;
      particle.position.z = Math.random() * 2000 - 1000;
      particle.scale.x = particle.scale.y = 8;
      scene.add(particle);

      particles.push(particle);
    }

    container.appendChild( renderer.domElement );


    var directionalLight = new THREE.DirectionalLight(0xffffff);
    directionalLight.position.set(0, 80, 9).normalize();
    scene.add(directionalLight);

    $(document).on('mousemove',  onDocumentMouseMove,  false);
    $(document).on('touchstart', onDocumentTouchStart, false);
    $(document).on('touchMove',  onDocumentTouchMove,  false);

    setInterval(loop, 20);
  }

  function onDocumentMouseMove(event) {
    mouseX = event.clientX - winHalfX;
    mouseY = event.clientY - winHalfY;
  }

  function onDocumentTouchStart(event) {
    if (event.touches.length == 1) {
      event.preventDefault();

      mouseX = event.touches[0].pageX - winHalfX;
      mouseY = event.touches[0].pageY - winHalfY;
    }
  }

  function onDocumentTouchMove(event) {
    if (event.touches.length == 1) {
      event.preventDefault();
      mouseX = event.touches[0].pageX - winHalfX;
      mouseY = event.touches[0].pageY - winHalfY;
    }
  }

  function loop() {
    for(var i=0; i<particles.length; i++) {
      var particle = particles[i];
      particle.updatePhysics();

      with(particle.position) {
        if (y <- 1000) y += 2000;
        if (x > 1000)  x -= 2000;
        else if (x <- 1000) x += 2000;
        if (z > 1000) z -= 2000;
        else if (z <- 1000) z += 2000;
      }
    }

    camera.position.x += (mouseX - camera.position.x) * 0.05;
    camera.position.y += (- mouseY - camera.position.y) * 0.05;
    camera.lookAt(scene.position);

    renderer.render(scene, camera);
  }


</script>  

</body>
</html>
